package com.example.android.cipherchat.Utils;

import com.example.android.cipherchat.Objects.Tutorial;

import java.util.ArrayList;
import java.util.List;

public class TutorialUtils {

    public static List<Tutorial> getTutorials() {
        List<Tutorial> list = new ArrayList<>();
        Tutorial tutorial_1 = new Tutorial();
        tutorial_1.setTitle("Why Do I Need Encrypted Communication?");
        tutorial_1.setTutorialContents("If your new to encrypted messaging platforms, you might be thinking \"I don't have anything to hide. Why do I need to use encrypted communication?\" What was just recently a new frontier, digital communication is now one of the main ways we communicate with one another. In many ways this is a great thing - it allows you to connect with friends, family, and colleagues from around the world in just an instant. However one risk that this poses is that a lot more of our private conversations now have a lot more opportunity to be leaked to the outside world. When sending regular text messages using the default texting applications on your android device, all of your messages are vulnerable to being exposed to your cell phone provider, your government, and to hackers. You might not give it too much thought - but everyone has personal information that they need to protect. For example, if your primary email account is compromised, an attacker could use account to reset your login information for many of your online accounts, giving them access to those accounts as well in addition to your personal e-mails. Additionally, the more personal information you expose, the more vulnerable you are to identity theft. So much of our communication today happens digitally, so it is important that everyone has a secure way to communicate privately when it is wanted or needed. Therefore whenever you need to send sensitive information over digital communication, such as personal information, financial information, sensitive business information, account passwords, or even just having conversations close to your personal life, it is strongly recommended by security experts that you should be using encrypted communication. \n" +
                "\n" +
                "In the next lesson you will learn about how encryption helps reinforce your security and privacy during your digital conversations.");
        list.add(tutorial_1);
        Tutorial tutorial_2 = new Tutorial();
        tutorial_2.setTitle("Introduction to Encryption");
        tutorial_2.setTutorialContents("Encryption is the process of using a set of clearly defined and repeatable steps (also known as an encryption algorithm or a cipher) to convert text (or other data) into an illegible form so that it can only be read by those who contain the appropriate key needed to reassemble the message back to its original form. One of the simplest examples of an encryption algorithm is the Caesar Cipher. In a Caesar Cipher, all the letters of a message are shifted by a certain number. For example, a shift of 1 would convert the message \"ABC\" into \"BCD\" and the message \"XYZ\" into \"YZA\". In this example, the key is again the number 1, which can be used to decrypt the message by shifting all the letters back by 1 place, restoring it back to its original form. The Caesar Cipher is a nice way to illustrate what encryption is, however it is an incredibly weak form of encryption since there are only 26 possible keys. Using a computer it would be very easy to quickly test all 26 possible keys, guaranteeing that one of the keys would unlock the original message. To provide much more secure forms of encryption, today's encryption algorithms are much more complex than this which make it very difficult to decrpyt the data without the proper key.");
        list.add(tutorial_2);
        Tutorial tutorial_3 = new Tutorial();
        tutorial_3.setTitle("Symmetric and Asymmetric Encryption");
        tutorial_3.setTutorialContents("There are two main forms of encryption algorithms - symmetric encryption and asymmetric encryption. Symmetric encryption means that a single key is used to both encrypt and decrypt the data. The Caesar Cipher explained earlier (where letters in a message are shifted by a certain number) is an example of a symmetric encryption algorithm because the same number (key) is used to both encrypt and decrypt the data. Symmetric encryption is still widely used today for a number of practical applications. However one problem with symmetric encryption algorithms is the difficulty of securely sharing the secret key. For example, if Bob wants to send an encrypted message to Alice, he will need a secure way to let Alice know what secret key to use to decrypt the message. Simply sharing the secret key over the internet is insecure because, just as an unecrypted message can fall into the wrong hands during transmission, so too can the secret key. To solve this problem, public key or asymmetric encryption is used. \n" +
                "\n" +
                "Asymmetric encryption works by using a pairs of related pair of related keys. The first key is the public key. This key can be shared freely with anyone without any security consequences and it is used to for encrypting the data. The second key is the private key, which is kept secret for each individual and is used to decrypt the data. To understand how asymmetric encryption works it is probably best to use an example. Lets say Bob wants to send a secure message to Alice. Alice's public key can be seen by anyone. Bob will use Alice's public key to encrypt the data, and then send it over to Alice. Only Alice has access to her private key and this is the only key that can be used to decrypt the data. Once Alice receives the message, she will use her private key to decrypt the data and read the contents of the original message.");
        list.add(tutorial_3);
        Tutorial tutorial_4 = new Tutorial();
        tutorial_4.setTitle("How Encryption Is Used Within This App");
        tutorial_4.setTutorialContents("This app uses a combination of both symmetric encryption and asymmetric encryption to provide end-to-end encrypted messaging chat functionality. To understand why both symmetric and asymmetric algorithms are needed, lets go back to our example of how asymmetric encryption systems work. Bob wants to send an secure message to Alice. Bob uses Alice's public key to encrypt the data. At this point, only Alice's private key, which only Alice has access to, can be used to decrypt the message. Here in lies the problem. At this point Bob can not see his own messages. If only asymmetric encryption were used in this app, you would only be able to see messages that were sent to you, and all the messages that are sent by you would appear as gibberish, since they encrypted with some else's public key. In order to solve this problem, symmetric encryption is used to encrypt each individual message. The key for each message is then encrypted twice with asymmetric encryption, once with the sender's public key and once with retriever's public key. At this point the symmetric encrypted message and the two copies of the asymmetric encrypted keys are sent to a cloud server. In order to decrypt the messages on the receiving end, the application on the receiver's device will use their private key to decrpyt their respective copy of the symmetric key. Once the symmetric key is unlocked, it is then used against the original message to restore the message back to its original form.");
        list.add(tutorial_4);
        return list;
    }
}
